{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPc0eany3u6dFUJckRLgZqV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vijayasri014/CD-LAB/blob/main/lab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fSo71oFieSUy",
        "outputId": "3b32bb09-4a35-4fd6-f5f0-646683572ef5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Keywords:  []\n",
            "Operators:  []\n",
            "Delimiters:  []\n",
            "Identifiers:  ['Hello', 'this', 'is', 'vijayasri', 'sigakolli']\n",
            "Numbers:  []\n"
          ]
        }
      ],
      "source": [
        "keywords = {\"auto\",\"break\",\"case\",\"char\",\"const\",\"continue\",\"default\",\"do\",\n",
        "\"double\",\"else\",\"enum\",\"extern\",\"float\",\"for\",\"goto\",\n",
        "\"if\",\"int\",\"long\",\"register\",\"return\",\"short\",\"signed\",\n",
        "\"sizeof\",\"static\",\"struct\",\"switch\",\"typedef\",\"union\",\n",
        "\"unsigned\",\"void\",\"volatile\",\"while\",\"printf\",\"scanf\",\"%d\",\"include\",\"stdio.h\",\"main\"}\n",
        "\n",
        "operators = {\"+\",\"-\",\"*\",\"/\",\"<\",\">\",\"=\",\"<=\",\">=\",\"==\",\"!=\",\"++\",\"--\",\"%\"}\n",
        "\n",
        "delimiters = {'(',')','{','}','[',']','\"',\"'\",';','#',',',''}\n",
        "\n",
        "def detect_keywords(text):\n",
        "\tarr = []\n",
        "\tfor word in text:\n",
        "\t\tif word in keywords:\n",
        "\t\t\tarr.append(word)\n",
        "\treturn list(set(arr))\n",
        "\n",
        "def detect_operators(text):\n",
        "\tarr = []\n",
        "\tfor word in text:\n",
        "\t\tif word in operators:\n",
        "\t\t\tarr.append(word)\n",
        "\treturn list(set(arr))\n",
        "\n",
        "def detect_delimiters(text):\n",
        "\tarr = []\n",
        "\tfor word in text:\n",
        "\t\tif word in delimiters:\n",
        "\t\t\tarr.append(word)\n",
        "\treturn list(set(arr))\n",
        "\n",
        "def detect_num(text):\n",
        "\tarr = []\n",
        "\tfor word in text:\n",
        "\t\ttry:\n",
        "\t\t\ta = int(word)\n",
        "\t\t\tarr.append(word)\n",
        "\t\texcept:\n",
        "\t\t\tpass\n",
        "\treturn list(set(arr))\n",
        "\"\"\"\n",
        "this is original function for detecting identifier\n",
        "def is_identifier(token):\n",
        "    if token[0] in numbers or token in keywords:\n",
        "        return False\n",
        "    else:\n",
        "        return identifier(token)\n",
        "def identifier(token):\n",
        "    if len(token)<2 and (token[0] in alphabets or token[0] in numbers or token[0] == \"_\"):\n",
        "        return True\n",
        "    elif token[0] in alphabets or token[0] in numbers or token[0] == \"_\":\n",
        "        return identifier(token[1:])\n",
        "    else:\n",
        "        return False\n",
        "\"\"\"\n",
        "def detect_identifiers(text):\n",
        "\tk = detect_keywords(text)\n",
        "\to = detect_operators(text)\n",
        "\td = detect_delimiters(text)\n",
        "\tn = detect_num(text)\n",
        "\tnot_ident = k + o + d + n\n",
        "\tarr = []\n",
        "\tfor word in text:\n",
        "\t\tif word not in not_ident:\n",
        "\t\t\tarr.append(word)\n",
        "\treturn arr\n",
        "\n",
        "with open('e1-example.txt') as t:\n",
        "\ttext = t.read().split()\n",
        "\n",
        "print(\"Keywords: \",detect_keywords(text))\n",
        "print(\"Operators: \",detect_operators(text))\n",
        "print(\"Delimiters: \",detect_delimiters(text))\n",
        "print(\"Identifiers: \",detect_identifiers(text))\n",
        "print(\"Numbers: \",detect_num(text))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "inp = \"((e+a).b*)*\"#input(\"\")\n",
        "\"\"\"\n",
        "Give your input in the above variable\n",
        "    a and b are the only terminals accepted by this script\n",
        "    e denotes epsilon\n",
        "    . is used for \"and\" operation Eg. ab = a.b\n",
        "    + is used for \"or\" operation Eg. a|b = a+b\n",
        "    * is the Kleene's Closure operator. You can give star operator after any closing brackets and terminals \n",
        "\"\"\"\n",
        "\n",
        "\n",
        "_=\"-\"\n",
        "\n",
        "start = 1 # denotes start of e-nfa table\n",
        "end = 1   # denotes end of our table which is initially same as start\n",
        "cur = 1   # denotes current position of our pointer\n",
        "# this is intitial e-nfa table with only one state which is start and end both\n",
        "table = [[\"state\",\"epsilon\",\"a\",\"b\"],\n",
        "          [1,_,_,_]]\n",
        "\n",
        "def print_t(table):\n",
        "    \"\"\"\n",
        "    This function prints the e-nfa table\n",
        "    \"\"\"\n",
        "    i = table[0]\n",
        "    print(f'{i[0]: <10}'+f'| {i[1]: <10}'+f'| {i[2]: <10}'+f'| {i[3]: <10}')\n",
        "    print(\"-\"*46)\n",
        "    for i in table[1:]:\n",
        "        try:\n",
        "            x = \" \".join([str(j) for j in i[1]])\n",
        "        except:\n",
        "            x = \"\"\n",
        "        try:\n",
        "            y = \" \".join([str(j) for j in i[2]])\n",
        "        except:\n",
        "            y = \"\"\n",
        "        try:\n",
        "            z = \" \".join([str(j) for j in i[3]])\n",
        "        except:\n",
        "            z = \"\"\n",
        "        print(f'{i[0]: <10}'+f'| {x: <10}'+f'| {y: <10}'+f'| {z: <10}')\n",
        "\n",
        "def e_(cur,ed=end):\n",
        "    \"\"\"\n",
        "    this fuction adds epsilon to the table\n",
        "    \"\"\"\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [cur,temp[1].append(cur+1),temp[2],temp[3]]\n",
        "    except:\n",
        "        table[cur] = [cur,[cur+1],temp[2],temp[3]]\n",
        "    try:\n",
        "        nv = table([cur+1])\n",
        "    except:\n",
        "        table.append([ed+1,_,_,_])\n",
        "        ed+=1\n",
        "    return ed\n",
        "\n",
        "\n",
        "def a_(cur,ed=end):\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [cur,temp[1],temp[2].append(cur+1),temp[3]]\n",
        "    except:\n",
        "        table[cur] = [cur,temp[1],[cur+1],temp[3]]\n",
        "    try:\n",
        "        nv = table([cur+1])\n",
        "    except:\n",
        "        table.append([ed+1,_,_,_])\n",
        "        ed+=1\n",
        "    return ed\n",
        "\n",
        "def b_(cur,ed=end):\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [cur,temp[1],temp[2],temp[3].append(cur+1)]\n",
        "    except:\n",
        "        table[cur] = [cur,temp[1],temp[2],[cur+1]]\n",
        "    try:\n",
        "        nv = table([cur+1])\n",
        "    except:\n",
        "        table.append([ed+1,_,_,_])\n",
        "        ed+=1\n",
        "    return ed\n",
        "\n",
        "def or_b(cur,ed=end):\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [cur,temp[1],temp[2],temp[3].append(cur+1)]\n",
        "    except:\n",
        "        table[cur] = [cur,temp[1],temp[2],[cur+1]]\n",
        "\n",
        "\n",
        "def or_a(cur,ed=end):\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [cur,temp[1],temp[2].append(cur+1),temp[3]]\n",
        "    except:\n",
        "        table[cur] = [cur,temp[1],[cur+1],temp[3]]\n",
        "\n",
        "def and_a(cur,ed=end):\n",
        "    cur+=1\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [cur,temp[1],temp[2].append(cur+1),temp[3]]\n",
        "    except:\n",
        "        table[cur] = [cur,temp[1],[cur+1],temp[3]]\n",
        "    try:\n",
        "        nv = table([cur+1])\n",
        "    except:\n",
        "        table.append([cur+1,_,_,_])\n",
        "        ed+=1\n",
        "    return cur,ed\n",
        "\n",
        "def and_b(cur,ed=end):\n",
        "    cur+=1\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [cur,temp[1],temp[2],temp[3].append(cur+1)]\n",
        "    except:\n",
        "        table[cur] = [cur,temp[1],temp[2],[cur+1]]\n",
        "    try:\n",
        "        nv = table([cur+1])\n",
        "    except:\n",
        "        table.append([cur+1,_,_,_])\n",
        "        ed+=1\n",
        "    return cur,ed\n",
        "\n",
        "def star(cur,ed=end):\n",
        "    table.append([ed+1,_,_,_])\n",
        "    table.append([ed+2,_,_,_])\n",
        "    ed+=2\n",
        "    for i in range(cur,ed):\n",
        "        temp = [table[ed-i+cur][0]]+table[ed-i+cur-1][1:4]\n",
        "        for j in [1,2,3]:\n",
        "            try:\n",
        "                temp[j] = [x+1 for x in table[ed-i+cur-1][j]]\n",
        "            except:\n",
        "                pass\n",
        "        table[ed-i+cur] = temp\n",
        "    table[cur]=[cur,_,_,_]\n",
        "\n",
        "    temp = table[cur]\n",
        "    try:\n",
        "        table[cur] = [temp[0],temp[1]+[cur+1,ed],temp[2],temp[3]]\n",
        "    except:\n",
        "        table[cur] = [temp[0],[cur+1,ed],temp[2],temp[3]]\n",
        "    \n",
        "    temp = table[ed-1]\n",
        "    try:\n",
        "        table[ed-1] = [temp[0],temp[1]+[cur+1,ed],temp[2],temp[3]]\n",
        "    except:\n",
        "        table[ed-1] = [temp[0],[cur+1,ed],temp[2],temp[3]]\n",
        "\n",
        "    return ed-1,ed\n",
        "\n",
        "\n",
        "def mod_table(inp,start,cur,end,table):\n",
        "    #print(inp)\n",
        "    k = 0\n",
        "    while k<len(inp):\n",
        "        #print(start,cur,end,k,inp[k:],len(table)-1)\n",
        "        if inp[k]==\"a\":\n",
        "            end = a_(cur,end)\n",
        "            #print(\"in a_\")\n",
        "        elif inp[k]==\"b\":\n",
        "            end = b_(cur,end)\n",
        "            #print(\"in b_\")\n",
        "        elif inp[k]==\"e\":\n",
        "            end = e_(cur,end)\n",
        "        elif inp[k]==\".\":\n",
        "            k+=1\n",
        "            if inp[k]==\"a\":\n",
        "                #k-=1\n",
        "                cur,end = and_a(cur,end)\n",
        "            elif inp[k]==\"b\":\n",
        "                cur,end = and_b(cur,end)\n",
        "                #k-=1\n",
        "            elif inp[k]==\"(\":\n",
        "                li = [\"(\"]\n",
        "                l = k\n",
        "                for i in inp[k+1:]:\n",
        "                    if i == \"(\":\n",
        "                        li.append(\"(\")\n",
        "                    if i == \")\":\n",
        "                        try:\n",
        "                            del li[-1]\n",
        "                        except:\n",
        "                            break\n",
        "                    if len(li)==0:\n",
        "                        break\n",
        "                    l+=1\n",
        "                m = k\n",
        "                k=l+1\n",
        "                cur+=1\n",
        "                start,cur,end,table = mod_table(inp[m+1:l+1],start,cur,end,table)\n",
        "\n",
        "        elif inp[k]==\"+\":\n",
        "            k+=1\n",
        "            if inp[k]==\"a\":\n",
        "                or_a(cur,end)\n",
        "                #print(\"in or_a\")\n",
        "            elif inp[k]==\"b\":\n",
        "                or_b(cur,end)\n",
        "                #print(\"in or_b\")\n",
        "            else:\n",
        "                print(f\"ERROR at{k }Done:{inp[:k+1]}Rem{inp[k+1:]}\")\n",
        "        \n",
        "        elif inp[k]==\"*\":\n",
        "            #print(\"in star\")\n",
        "            cur,end = star(cur,end)\n",
        "        elif inp[k]==\"(\":\n",
        "            li = [\"(\"]\n",
        "            l = k\n",
        "            for i in inp[k+1:]:\n",
        "                if i == \"(\":\n",
        "                    li.append(\"(\")\n",
        "                if i == \")\":\n",
        "                    try:\n",
        "                        del li[-1]\n",
        "                    except:\n",
        "                        break\n",
        "                if len(li)==0:\n",
        "                    break\n",
        "\n",
        "                l+=1\n",
        "            m = k\n",
        "            k=l+1\n",
        "            try:\n",
        "                if inp[k+1]==\"*\":\n",
        "                    cur_ = cur\n",
        "            except:\n",
        "                pass\n",
        "            #print(inp[m+1:l+1])\n",
        "            start,cur,end,table = mod_table(inp[m+1:l+1],start,cur,end,table)\n",
        "            try:\n",
        "                if inp[k+1]==\"*\":\n",
        "                    cur = cur_\n",
        "            except:\n",
        "                pass\n",
        "        else:\n",
        "            print(f'error{k}{inp[k]}')\n",
        "        k+=1\n",
        "    return start,cur,end,table\n",
        "\n",
        "\n",
        "\n",
        "start,cur,end,table = mod_table(inp,start,cur,end,table)\n",
        "\n",
        "print_t(table)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EA9xg1MxeqeH",
        "outputId": "c6b1412e-3f7e-4080-ac96-0daba7ca668f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "state     | epsilon   | a         | b         \n",
            "----------------------------------------------\n",
            "1         | 2 7       | -         | -         \n",
            "2         | 3         | 3         | -         \n",
            "3         | 4 6       | -         | -         \n",
            "4         | -         | -         | 5         \n",
            "5         | 4 6       | -         | -         \n",
            "6         | 2 7       | -         | -         \n",
            "7         | -         | -         | -         \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##Note : This code is direct and indirect left recursion\n",
        "##Some point to notedown for understanding output\n",
        "##  'e' means ϵ (epsalion)\n",
        "## A->[[‘t’,’A'’],[‘b’]] means  A -> tA' | b              \n",
        "##This above note for understanding output \n",
        "\n",
        "\n",
        "gram = {}\n",
        "\n",
        "def add(str):                               #to rules together\n",
        "    str = str.replace(\" \", \"\").replace(\"\t\", \"\").replace(\"\\n\", \"\")\n",
        "    x = str.split(\"->\")\n",
        "    y = x[1]\n",
        "    x.pop()\n",
        "    z = y.split(\"|\")\n",
        "    x.append(z)\n",
        "    gram[x[0]]=x[1]\n",
        "\n",
        "def removeDirectLR(gramA, A):        \n",
        "\t\"\"\"gramA is dictonary\"\"\"\n",
        "\ttemp = gramA[A]\n",
        "\ttempCr = []\n",
        "\ttempInCr = []\n",
        "\tfor i in temp:\n",
        "\t\tif i[0] == A:\n",
        "\t\t\t#tempInCr.append(i[1:])\n",
        "\t\t\ttempInCr.append(i[1:]+[A+\"'\"])\n",
        "\t\telse:\n",
        "\t\t\t#tempCr.append(i)\n",
        "\t\t\ttempCr.append(i+[A+\"'\"])\n",
        "\ttempInCr.append([\"e\"])\n",
        "\tgramA[A] = tempCr\n",
        "\tgramA[A+\"'\"] = tempInCr\n",
        "\treturn gramA\n",
        "\n",
        "\n",
        "def checkForIndirect(gramA, a, ai):\n",
        "\tif ai not in gramA:\n",
        "\t\treturn False \n",
        "\tif a == ai:\n",
        "\t\treturn True\n",
        "\tfor i in gramA[ai]:\n",
        "\t\tif i[0] == ai:\n",
        "\t\t\treturn False\n",
        "\t\tif i[0] in gramA:\n",
        "\t\t\treturn checkForIndirect(gramA, a, i[0])\n",
        "\treturn False\n",
        "\n",
        "def rep(gramA, A):\n",
        "\ttemp = gramA[A]\n",
        "\tnewTemp = []\n",
        "\tfor i in temp:\n",
        "\t\tif checkForIndirect(gramA, A, i[0]):\n",
        "\t\t\tt = []\n",
        "\t\t\tfor k in gramA[i[0]]:\n",
        "\t\t\t\tt=[]\n",
        "\t\t\t\tt+=k\n",
        "\t\t\t\tt+=i[1:]\n",
        "\t\t\t\tnewTemp.append(t)\n",
        "\n",
        "\t\telse:\n",
        "\t\t\tnewTemp.append(i)\n",
        "\tgramA[A] = newTemp\n",
        "\treturn gramA\n",
        "\n",
        "def rem(gram):\n",
        "\tc = 1\n",
        "\tconv = {}\n",
        "\tgramA = {}\n",
        "\trevconv = {}\n",
        "\tfor j in gram:\n",
        "\t\tconv[j] = \"A\"+str(c)\n",
        "\t\tgramA[\"A\"+str(c)] = []\n",
        "\t\tc+=1\n",
        "\n",
        "\tfor i in gram:\n",
        "\t\tfor j in gram[i]:\n",
        "\t\t\ttemp = []\t\n",
        "\t\t\tfor k in j:\n",
        "\t\t\t\tif k in conv:\n",
        "\t\t\t\t\ttemp.append(conv[k])\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\ttemp.append(k)\n",
        "\t\t\tgramA[conv[i]].append(temp)\n",
        "\n",
        "\n",
        "\t#print(gramA)\n",
        "\tfor i in range(c-1,0,-1):\n",
        "\t\tai = \"A\"+str(i)\n",
        "\t\tfor j in range(0,i):\n",
        "\t\t\taj = gramA[ai][0][0]\n",
        "\t\t\tif ai!=aj :\n",
        "\t\t\t\tif aj in gramA and checkForIndirect(gramA,ai,aj):\n",
        "\t\t\t\t\tgramA = rep(gramA, ai)\n",
        "\n",
        "\tfor i in range(1,c):\n",
        "\t\tai = \"A\"+str(i)\n",
        "\t\tfor j in gramA[ai]:\n",
        "\t\t\tif ai==j[0]:\n",
        "\t\t\t\tgramA = removeDirectLR(gramA, ai)\n",
        "\t\t\t\tbreak\n",
        "\n",
        "\top = {}\n",
        "\tfor i in gramA:\n",
        "\t\ta = str(i)\n",
        "\t\tfor j in conv:\n",
        "\t\t\ta = a.replace(conv[j],j)\n",
        "\t\trevconv[i] = a\n",
        "\n",
        "\tfor i in gramA:\n",
        "\t\tl = []\n",
        "\t\tfor j in gramA[i]:\n",
        "\t\t\tk = []\n",
        "\t\t\tfor m in j:\n",
        "\t\t\t\tif m in revconv:\n",
        "\t\t\t\t\tk.append(m.replace(m,revconv[m]))\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\tk.append(m)\n",
        "\t\t\tl.append(k)\n",
        "\t\top[revconv[i]] = l\n",
        "\n",
        "\treturn op\n",
        "\n",
        "n = int(input(\"Enter No of Production: \"))\n",
        "for i in range(n):\n",
        "    txt=input()\n",
        "    add(txt)\n",
        "   \n",
        "result = rem(gram)\n",
        "\n",
        "for x,y in result.items():\n",
        "    print(f'{x} -> ', end=\"\")\n",
        "    for index, i in enumerate(y):\n",
        "        for j in i:\n",
        "            print(j, end=\"\")\n",
        "            if (index != len(y) - 1):\n",
        "                print(\" | \", end=\"\")\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4iWaSj0fGrf",
        "outputId": "69665cae-86ed-4e30-b977-214369eae203"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter No of Production: 1\n",
            "E->E+ab\n",
            "E -> \n",
            "E' -> + | a | b | E' | e\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from itertools import takewhile\n",
        "\n",
        "s= \"S->iEtS|iEtSeS|a\"\n",
        "\n",
        "def groupby(ls):\n",
        "    d = {}\n",
        "    ls = [ y[0] for y in rules ]\n",
        "    initial = list(set(ls))\n",
        "    for y in initial:\n",
        "        for i in rules:\n",
        "            if i.startswith(y):\n",
        "                if y not in d:\n",
        "                    d[y] = []\n",
        "                d[y].append(i)\n",
        "    return d\n",
        "\n",
        "def prefix(x):\n",
        "    return len(set(x)) == 1\n",
        "\n",
        "\n",
        "starting=\"\"\n",
        "rules=[]\n",
        "common=[]\n",
        "alphabetset=[\"A'\",\"B'\",\"C'\",\"D'\",\"E'\",\"F'\",\"G'\",\"H'\",\"I'\",\"J'\",\"K'\",\"L'\",\"M'\",\"N'\",\"O'\",\"P'\",\"Q'\",\"R'\",\"S'\",\"T'\",\"U'\",\"V'\",\"W'\",\"X'\",\"Y'\",\"Z'\"]\n",
        "s = s.replace(\" \", \"\").replace(\"\t\", \"\").replace(\"\\n\", \"\")\n",
        "\n",
        "while(True):\n",
        "    rules=[]\n",
        "    common=[]\n",
        "    split=s.split(\"->\")\n",
        "    starting=split[0]\n",
        "    for i in split[1].split(\"|\"):\n",
        "        rules.append(i)\n",
        "\n",
        "#logic for taking commons out\n",
        "    for k, l in groupby(rules).items():\n",
        "        r = [l[0] for l in takewhile(prefix, zip(*l))]\n",
        "        common.append(''.join(r))\n",
        "#end of taking commons\n",
        "    for i in common:\n",
        "        newalphabet=alphabetset.pop()\n",
        "        print(starting+\"->\"+i+newalphabet)\n",
        "        index=[]\n",
        "        for k in rules:\n",
        "            if(k.startswith(i)):\n",
        "                index.append(k)\n",
        "        print(newalphabet+\"->\",end=\"\")\n",
        "        for j in index[:-1]:\n",
        "            stringtoprint=j.replace(i,\"\", 1)+\"|\"\n",
        "            if stringtoprint==\"|\":\n",
        "                print(\"\\u03B5\",\"|\",end=\"\")\n",
        "            else:\n",
        "                print(j.replace(i,\"\", 1)+\"|\",end=\"\")\n",
        "        stringtoprint=index[-1].replace(i,\"\", 1)+\"|\"\n",
        "        if stringtoprint==\"|\":\n",
        "            print(\"\\u03B5\",\"\",end=\"\")\n",
        "        else:\n",
        "            print(index[-1].replace(i,\"\", 1)+\"\",end=\"\")\n",
        "        print(\"\")\n",
        "    break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g_WUhSjBfr3m",
        "outputId": "110f8db7-5a27-43b9-e9bb-80e2ab501a5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "S->aZ'\n",
            "Z'->ε \n",
            "S->iEtSY'\n",
            "Y'->ε |eS\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# #example for direct left recursion\n",
        "# gram = {\"A\":[\"Aa\",\"Ab\",\"c\",\"d\"]\n",
        "# }\n",
        "#example for indirect left recursion\n",
        "gram = {\n",
        "\t\"E\":[\"E+T\",\"T\"],\n",
        "\t\"T\":[\"T*F\",\"F\"],\n",
        "\t\"F\":[\"(E)\",\"i\"]\n",
        "}\n",
        "\n",
        "def removeDirectLR(gramA, A):\n",
        "\t\"\"\"gramA is dictonary\"\"\"\n",
        "\ttemp = gramA[A]\n",
        "\ttempCr = []\n",
        "\ttempInCr = []\n",
        "\tfor i in temp:\n",
        "\t\tif i[0] == A:\n",
        "\t\t\t#tempInCr.append(i[1:])\n",
        "\t\t\ttempInCr.append(i[1:]+[A+\"'\"])\n",
        "\t\telse:\n",
        "\t\t\t#tempCr.append(i)\n",
        "\t\t\ttempCr.append(i+[A+\"'\"])\n",
        "\ttempInCr.append([\"e\"])\n",
        "\tgramA[A] = tempCr\n",
        "\tgramA[A+\"'\"] = tempInCr\n",
        "\treturn gramA\n",
        "\n",
        "\n",
        "def checkForIndirect(gramA, a, ai):\n",
        "\tif ai not in gramA:\n",
        "\t\treturn False \n",
        "\tif a == ai:\n",
        "\t\treturn True\n",
        "\tfor i in gramA[ai]:\n",
        "\t\tif i[0] == ai:\n",
        "\t\t\treturn False\n",
        "\t\tif i[0] in gramA:\n",
        "\t\t\treturn checkForIndirect(gramA, a, i[0])\n",
        "\treturn False\n",
        "\n",
        "def rep(gramA, A):\n",
        "\ttemp = gramA[A]\n",
        "\tnewTemp = []\n",
        "\tfor i in temp:\n",
        "\t\tif checkForIndirect(gramA, A, i[0]):\n",
        "\t\t\tt = []\n",
        "\t\t\tfor k in gramA[i[0]]:\n",
        "\t\t\t\tt=[]\n",
        "\t\t\t\tt+=k\n",
        "\t\t\t\tt+=i[1:]\n",
        "\t\t\t\tnewTemp.append(t)\n",
        "\n",
        "\t\telse:\n",
        "\t\t\tnewTemp.append(i)\n",
        "\tgramA[A] = newTemp\n",
        "\treturn gramA\n",
        "\n",
        "def rem(gram):\n",
        "\tc = 1\n",
        "\tconv = {}\n",
        "\tgramA = {}\n",
        "\trevconv = {}\n",
        "\tfor j in gram:\n",
        "\t\tconv[j] = \"A\"+str(c)\n",
        "\t\tgramA[\"A\"+str(c)] = []\n",
        "\t\tc+=1\n",
        "\n",
        "\tfor i in gram:\n",
        "\t\tfor j in gram[i]:\n",
        "\t\t\ttemp = []\t\n",
        "\t\t\tfor k in j:\n",
        "\t\t\t\tif k in conv:\n",
        "\t\t\t\t\ttemp.append(conv[k])\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\ttemp.append(k)\n",
        "\t\t\tgramA[conv[i]].append(temp)\n",
        "\n",
        "\n",
        "\t#print(gramA)\n",
        "\tfor i in range(c-1,0,-1):\n",
        "\t\tai = \"A\"+str(i)\n",
        "\t\tfor j in range(0,i):\n",
        "\t\t\taj = gramA[ai][0][0]\n",
        "\t\t\tif ai!=aj :\n",
        "\t\t\t\tif aj in gramA and checkForIndirect(gramA,ai,aj):\n",
        "\t\t\t\t\tgramA = rep(gramA, ai)\n",
        "\n",
        "\tfor i in range(1,c):\n",
        "\t\tai = \"A\"+str(i)\n",
        "\t\tfor j in gramA[ai]:\n",
        "\t\t\tif ai==j[0]:\n",
        "\t\t\t\tgramA = removeDirectLR(gramA, ai)\n",
        "\t\t\t\tbreak\n",
        "\n",
        "\top = {}\n",
        "\tfor i in gramA:\n",
        "\t\ta = str(i)\n",
        "\t\tfor j in conv:\n",
        "\t\t\ta = a.replace(conv[j],j)\n",
        "\t\trevconv[i] = a\n",
        "\n",
        "\tfor i in gramA:\n",
        "\t\tl = []\n",
        "\t\tfor j in gramA[i]:\n",
        "\t\t\tk = []\n",
        "\t\t\tfor m in j:\n",
        "\t\t\t\tif m in revconv:\n",
        "\t\t\t\t\tk.append(m.replace(m,revconv[m]))\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\tk.append(m)\n",
        "\t\t\tl.append(k)\n",
        "\t\top[revconv[i]] = l\n",
        "\n",
        "\treturn op\n",
        "\n",
        "result = rem(gram)\n",
        "\n",
        "\n",
        "def first(gram, term):\n",
        "\ta = []\n",
        "\tif term not in gram:\n",
        "\t\treturn [term]\n",
        "\tfor i in gram[term]:\n",
        "\t\tif i[0] not in gram:\n",
        "\t\t\ta.append(i[0])\n",
        "\t\telif i[0] in gram:\n",
        "\t\t\ta += first(gram, i[0])\n",
        "\treturn a\n",
        "\n",
        "firsts = {}\n",
        "for i in result:\n",
        "\tfirsts[i] = first(result,i)\n",
        "\tprint(f'First({i}):',firsts[i])\n",
        "# \ttemp = follow(result,i,i)\n",
        "# \ttemp = list(set(temp))\n",
        "# \ttemp = [x if x != \"e\" else \"$\" for x in temp]\n",
        "# \tprint(f'Follow({i}):',temp)\n",
        "\n",
        "def follow(gram, term):\n",
        "\ta = []\n",
        "\tfor rule in gram:\n",
        "\t\tfor i in gram[rule]:\n",
        "\t\t\tif term in i:\n",
        "\t\t\t\ttemp = i\n",
        "\t\t\t\tindx = i.index(term)\n",
        "\t\t\t\tif indx+1!=len(i):\n",
        "\t\t\t\t\tif i[-1] in firsts:\n",
        "\t\t\t\t\t\ta+=firsts[i[-1]]\n",
        "\t\t\t\t\telse:\n",
        "\t\t\t\t\t\ta+=[i[-1]]\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\ta+=[\"e\"]\n",
        "\t\t\t\tif rule != term and \"e\" in a:\n",
        "\t\t\t\t\ta+= follow(gram,rule)\n",
        "\treturn a\n",
        "\n",
        "follows = {}\n",
        "for i in result:\n",
        "\tfollows[i] = list(set(follow(result,i)))\n",
        "\tif \"e\" in follows[i]:\n",
        "\t\tfollows[i].pop(follows[i].index(\"e\"))\n",
        "\tfollows[i]+=[\"$\"]\n",
        "\tprint(f'Follow({i}):',follows[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tYog9LcugDkE",
        "outputId": "bad42bcf-9429-40cf-e371-fa9b64375e58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First(E): ['(', 'i']\n",
            "First(T): ['(', 'i']\n",
            "First(F): ['(', 'i']\n",
            "First(E'): ['+', 'e']\n",
            "First(T'): ['*', 'e']\n",
            "Follow(E): [')', '$']\n",
            "Follow(T): [')', '+', '$']\n",
            "Follow(F): ['*', ')', '+', '$']\n",
            "Follow(E'): [')', '$']\n",
            "Follow(T'): [')', '+', '$']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [\"E=E+T\",\n",
        "     \"E=T\",\n",
        "     \"T=T*F\",\n",
        "     \"T=F\",\n",
        "     \"F=(E)\",\n",
        "     \"F=i\"]\n",
        "\n",
        "rules = {}\n",
        "terms = []\n",
        "for i in a:\n",
        "    temp = i.split(\"=\")\n",
        "    terms.append(temp[0])\n",
        "    try:\n",
        "        rules[temp[0]] += [temp[1]]\n",
        "    except:\n",
        "        rules[temp[0]] = [temp[1]]\n",
        "\n",
        "terms = list(set(terms))\n",
        "print(rules,terms)\n",
        "\n",
        "def leading(gram, rules, term, start):\n",
        "    s = []\n",
        "    if gram[0] not in terms:\n",
        "        return gram[0]\n",
        "    elif len(gram) == 1:\n",
        "        return [0]\n",
        "    elif gram[1] not in terms and gram[-1] is not start:\n",
        "        for i in rules[gram[-1]]:\n",
        "            s+= leading(i, rules, gram[-1], start)\n",
        "            s+= [gram[1]]\n",
        "        return s\n",
        "    \n",
        "def trailing(gram, rules, term, start):\n",
        "    s = []\n",
        "    if gram[-1] not in terms:\n",
        "        return gram[-1]\n",
        "    elif len(gram) == 1:\n",
        "        return [0]\n",
        "    elif gram[-2] not in terms and gram[-1] is not start:\n",
        "\n",
        "        for i in rules[gram[-1]]:\n",
        "            s+= trailing(i, rules, gram[-1], start)\n",
        "            s+= [gram[-2]]\n",
        "        return s\n",
        "\n",
        "leads = {}\n",
        "trails = {}\n",
        "for i in terms:\n",
        "    s = [0]\n",
        "    for j in rules[i]:\n",
        "        s+=leading(j,rules,i,i)\n",
        "    s = set(s)\n",
        "    s.remove(0)\n",
        "    leads[i] = s\n",
        "    s = [0]\n",
        "    for j in rules[i]:\n",
        "        s+=trailing(j,rules,i,i)\n",
        "    s = set(s)\n",
        "    s.remove(0)\n",
        "    trails[i] = s\n",
        "\n",
        "for i in terms:\n",
        "    print(\"LEADING(\"+i+\"):\",leads[i])\n",
        "for i in terms:\n",
        "    print(\"TRAILING(\"+i+\"):\",trails[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sDb_qurIvCSJ",
        "outputId": "61144c4f-965b-4a64-bc34-271a27fc992e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'E': ['E+T', 'T'], 'T': ['T*F', 'F'], 'F': ['(E)', 'i']} ['T', 'F', 'E']\n",
            "LEADING(T): {'*', '(', 'i'}\n",
            "LEADING(F): {'(', 'i'}\n",
            "LEADING(E): {'i', '+', '*', '('}\n",
            "TRAILING(T): {'*', ')', 'i'}\n",
            "TRAILING(F): {')', 'i'}\n",
            "TRAILING(E): {'i', '+', '*', ')'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# #example for direct left recursion\n",
        "# gram = {\"A\":[\"Aa\",\"Ab\",\"c\",\"d\"]\n",
        "# }\n",
        "#example for indirect left recursion\n",
        "gram = {\n",
        "\t\"E\":[\"E+T\",\"T\"],\n",
        "\t\"T\":[\"T*F\",\"F\"],\n",
        "\t\"F\":[\"(E)\",\"i\"]\n",
        "}\n",
        "\n",
        "def removeDirectLR(gramA, A):\n",
        "\t\"\"\"gramA is dictonary\"\"\"\n",
        "\ttemp = gramA[A]\n",
        "\ttempCr = []\n",
        "\ttempInCr = []\n",
        "\tfor i in temp:\n",
        "\t\tif i[0] == A:\n",
        "\t\t\t#tempInCr.append(i[1:])\n",
        "\t\t\ttempInCr.append(i[1:]+[A+\"'\"])\n",
        "\t\telse:\n",
        "\t\t\t#tempCr.append(i)\n",
        "\t\t\ttempCr.append(i+[A+\"'\"])\n",
        "\ttempInCr.append([\"e\"])\n",
        "\tgramA[A] = tempCr\n",
        "\tgramA[A+\"'\"] = tempInCr\n",
        "\treturn gramA\n",
        "\n",
        "\n",
        "def checkForIndirect(gramA, a, ai):\n",
        "\tif ai not in gramA:\n",
        "\t\treturn False \n",
        "\tif a == ai:\n",
        "\t\treturn True\n",
        "\tfor i in gramA[ai]:\n",
        "\t\tif i[0] == ai:\n",
        "\t\t\treturn False\n",
        "\t\tif i[0] in gramA:\n",
        "\t\t\treturn checkForIndirect(gramA, a, i[0])\n",
        "\treturn False\n",
        "\n",
        "def rep(gramA, A):\n",
        "\ttemp = gramA[A]\n",
        "\tnewTemp = []\n",
        "\tfor i in temp:\n",
        "\t\tif checkForIndirect(gramA, A, i[0]):\n",
        "\t\t\tt = []\n",
        "\t\t\tfor k in gramA[i[0]]:\n",
        "\t\t\t\tt=[]\n",
        "\t\t\t\tt+=k\n",
        "\t\t\t\tt+=i[1:]\n",
        "\t\t\t\tnewTemp.append(t)\n",
        "\n",
        "\t\telse:\n",
        "\t\t\tnewTemp.append(i)\n",
        "\tgramA[A] = newTemp\n",
        "\treturn gramA\n",
        "\n",
        "def rem(gram):\n",
        "\tc = 1\n",
        "\tconv = {}\n",
        "\tgramA = {}\n",
        "\trevconv = {}\n",
        "\tfor j in gram:\n",
        "\t\tconv[j] = \"A\"+str(c)\n",
        "\t\tgramA[\"A\"+str(c)] = []\n",
        "\t\tc+=1\n",
        "\n",
        "\tfor i in gram:\n",
        "\t\tfor j in gram[i]:\n",
        "\t\t\ttemp = []\t\n",
        "\t\t\tfor k in j:\n",
        "\t\t\t\tif k in conv:\n",
        "\t\t\t\t\ttemp.append(conv[k])\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\ttemp.append(k)\n",
        "\t\t\tgramA[conv[i]].append(temp)\n",
        "\n",
        "\n",
        "\t#print(gramA)\n",
        "\tfor i in range(c-1,0,-1):\n",
        "\t\tai = \"A\"+str(i)\n",
        "\t\tfor j in range(0,i):\n",
        "\t\t\taj = gramA[ai][0][0]\n",
        "\t\t\tif ai!=aj :\n",
        "\t\t\t\tif aj in gramA and checkForIndirect(gramA,ai,aj):\n",
        "\t\t\t\t\tgramA = rep(gramA, ai)\n",
        "\n",
        "\tfor i in range(1,c):\n",
        "\t\tai = \"A\"+str(i)\n",
        "\t\tfor j in gramA[ai]:\n",
        "\t\t\tif ai==j[0]:\n",
        "\t\t\t\tgramA = removeDirectLR(gramA, ai)\n",
        "\t\t\t\tbreak\n",
        "\n",
        "\top = {}\n",
        "\tfor i in gramA:\n",
        "\t\ta = str(i)\n",
        "\t\tfor j in conv:\n",
        "\t\t\ta = a.replace(conv[j],j)\n",
        "\t\trevconv[i] = a\n",
        "\n",
        "\tfor i in gramA:\n",
        "\t\tl = []\n",
        "\t\tfor j in gramA[i]:\n",
        "\t\t\tk = []\n",
        "\t\t\tfor m in j:\n",
        "\t\t\t\tif m in revconv:\n",
        "\t\t\t\t\tk.append(m.replace(m,revconv[m]))\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\tk.append(m)\n",
        "\t\t\tl.append(k)\n",
        "\t\top[revconv[i]] = l\n",
        "\n",
        "\treturn op\n",
        "\n",
        "result = rem(gram)\n",
        "terminals = []\n",
        "for i in result:\n",
        "\tfor j in result[i]:\n",
        "\t\tfor k in j:\n",
        "\t\t\tif k not in result:\n",
        "\t\t\t\tterminals+=[k]\n",
        "terminals = list(set(terminals))\n",
        "#print(terminals)\n",
        "\n",
        "def first(gram, term):\n",
        "\ta = []\n",
        "\tif term not in gram:\n",
        "\t\treturn [term]\n",
        "\tfor i in gram[term]:\n",
        "\t\tif i[0] not in gram:\n",
        "\t\t\ta.append(i[0])\n",
        "\t\telif i[0] in gram:\n",
        "\t\t\ta += first(gram, i[0])\n",
        "\treturn a\n",
        "\n",
        "firsts = {}\n",
        "for i in result:\n",
        "\tfirsts[i] = first(result,i)\n",
        "#\tprint(f'First({i}):',firsts[i])\n",
        "\n",
        "def follow(gram, term):\n",
        "\ta = []\n",
        "\tfor rule in gram:\n",
        "\t\tfor i in gram[rule]:\n",
        "\t\t\tif term in i:\n",
        "\t\t\t\ttemp = i\n",
        "\t\t\t\tindx = i.index(term)\n",
        "\t\t\t\tif indx+1!=len(i):\n",
        "\t\t\t\t\tif i[-1] in firsts:\n",
        "\t\t\t\t\t\ta+=firsts[i[-1]]\n",
        "\t\t\t\t\telse:\n",
        "\t\t\t\t\t\ta+=[i[-1]]\n",
        "\t\t\t\telse:\n",
        "\t\t\t\t\ta+=[\"e\"]\n",
        "\t\t\t\tif rule != term and \"e\" in a:\n",
        "\t\t\t\t\ta+= follow(gram,rule)\n",
        "\treturn a\n",
        "\n",
        "follows = {}\n",
        "for i in result:\n",
        "\tfollows[i] = list(set(follow(result,i)))\n",
        "\tif \"e\" in follows[i]:\n",
        "\t\tfollows[i].pop(follows[i].index(\"e\"))\n",
        "\tfollows[i]+=[\"$\"]\n",
        "#\tprint(f'Follow({i}):',follows[i])\n",
        "\n",
        "resMod = {}\n",
        "for i in result:\n",
        "\tl = []\n",
        "\tfor j in result[i]:\n",
        "\t\ttemp = \"\"\n",
        "\t\tfor k in j:\n",
        "\t\t\ttemp+=k\n",
        "\t\tl.append(temp)\n",
        "\tresMod[i] = l\n",
        "\n",
        "# create predictive parsing table\n",
        "tterm = list(terminals)\n",
        "tterm.pop(tterm.index(\"e\"))\n",
        "tterm+=[\"$\"]\n",
        "pptable = {}\n",
        "for i in result:\n",
        "\tfor j in tterm:\n",
        "\t\tif j in firsts[i]:\n",
        "\t\t\tpptable[(i,j)]=resMod[i][0]\n",
        "\t\telse:\n",
        "\t\t\tpptable[(i,j)]=\"\"\n",
        "\tif \"e\" in firsts[i]:\n",
        "\t\tfor j in tterm:\n",
        "\t\t\tif j in follows[i]:\n",
        "\t\t\t\tpptable[(i,j)]=\"e\" \t\n",
        "pptable[(\"F\",\"i\")] = \"i\"\n",
        "toprint = f'{\"\": <10}'\n",
        "for i in tterm:\n",
        "\ttoprint+= f'|{i: <10}'\n",
        "print(toprint)\n",
        "for i in result:\n",
        "\ttoprint = f'{i: <10}'\n",
        "\tfor j in tterm:\n",
        "\t\tif pptable[(i,j)]!=\"\":\n",
        "\t\t\ttoprint+=f'|{i+\"->\"+pptable[(i,j)]: <10}'\n",
        "\t\telse:\n",
        "\t\t\ttoprint+=f'|{pptable[(i,j)]: <10}'\n",
        "\tprint(f'{\"-\":-<76}')\n",
        "\tprint(toprint)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X-VL2svfvJq-",
        "outputId": "7a17cb05-be76-44fc-b7fb-db239a79c3d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          |i         |+         |*         |)         |(         |$         \n",
            "----------------------------------------------------------------------------\n",
            "E         |E->TE'    |          |          |          |E->TE'    |          \n",
            "----------------------------------------------------------------------------\n",
            "T         |T->FT'    |          |          |          |T->FT'    |          \n",
            "----------------------------------------------------------------------------\n",
            "F         |F->i      |          |          |          |F->(E)    |          \n",
            "----------------------------------------------------------------------------\n",
            "E'        |          |E'->+TE'  |          |E'->e     |          |E'->e     \n",
            "----------------------------------------------------------------------------\n",
            "T'        |          |T'->e     |T'->*FT'  |T'->e     |          |T'->e     \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# example 1\n",
        "gram = {\n",
        "\t\"E\":[\"2E2\",\"3E3\",\"4\"]\n",
        "}\n",
        "starting_terminal = \"E\"\n",
        "inp = \"2324232$\"\n",
        "\"\"\"\n",
        "# example 2\n",
        "gram = {\n",
        "\t\"S\":[\"S+S\",\"S*S\",\"i\"]\n",
        "}\n",
        "starting_terminal = \"S\"\n",
        "inp = \"i+i*i\"\n",
        "\"\"\"\n",
        "stack = \"$\"\n",
        "print(f'{\"Stack\": <15}'+\"|\"+f'{\"Input Buffer\": <15}'+\"|\"+f'Parsing Action')\n",
        "print(f'{\"-\":-<50}')\n",
        "\n",
        "while True:\n",
        "\taction = True\n",
        "\ti = 0\n",
        "\twhile i<len(gram[starting_terminal]):\n",
        "\t\tif gram[starting_terminal][i] in stack:\n",
        "\t\t\tstack = stack.replace(gram[starting_terminal][i],starting_terminal)\n",
        "\t\t\tprint(f'{stack: <15}'+\"|\"+f'{inp: <15}'+\"|\"+f'Reduce S->{gram[starting_terminal][i]}')\n",
        "\t\t\ti=-1\n",
        "\t\t\taction = False\n",
        "\t\ti+=1\n",
        "\tif len(inp)>1:\n",
        "\t\tstack+=inp[0]\n",
        "\t\tinp=inp[1:]\n",
        "\t\tprint(f'{stack: <15}'+\"|\"+f'{inp: <15}'+\"|\"+f'Shift')\n",
        "\t\taction = False\n",
        "\n",
        "\tif inp == \"$\" and stack == (\"$\"+starting_terminal):\n",
        "\t\tprint(f'{stack: <15}'+\"|\"+f'{inp: <15}'+\"|\"+f'Accepted')\n",
        "\t\tbreak\n",
        "\n",
        "\tif action:\n",
        "\t\tprint(f'{stack: <15}'+\"|\"+f'{inp: <15}'+\"|\"+f'Rejected')\n",
        "\t\tbreak"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H1E29xzsvaNd",
        "outputId": "26bf5d9c-1654-4831-e142-8c3524d2cbf2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stack          |Input Buffer   |Parsing Action\n",
            "--------------------------------------------------\n",
            "$2             |324232$        |Shift\n",
            "$23            |24232$         |Shift\n",
            "$232           |4232$          |Shift\n",
            "$2324          |232$           |Shift\n",
            "$232E          |232$           |Reduce S->4\n",
            "$232E2         |32$            |Shift\n",
            "$23E           |32$            |Reduce S->2E2\n",
            "$23E3          |2$             |Shift\n",
            "$2E            |2$             |Reduce S->3E3\n",
            "$2E2           |$              |Shift\n",
            "$E             |$              |Reduce S->2E2\n",
            "$E             |$              |Accepted\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gram = {\n",
        "\t\"S\":[\"CC\"],\n",
        "\t\"C\":[\"aC\",\"d\"]\n",
        "}\n",
        "start = \"S\"\n",
        "terms = [\"a\",\"d\",\"$\"]\n",
        "\n",
        "non_terms = []\n",
        "for i in gram:\n",
        "\tnon_terms.append(i)\n",
        "gram[\"S'\"]= [start]\n",
        "\n",
        "\n",
        "new_row = {}\n",
        "for i in terms+non_terms:\n",
        "\tnew_row[i]=\"\"\n",
        "\n",
        "\n",
        "non_terms += [\"S'\"]\n",
        "# each row in state table will be dictionary {nonterms ,term,$}\n",
        "stateTable = []\n",
        "# I = [(terminal, closure)]\n",
        "# I = [(\"S\",\"A.A\")]\n",
        "\n",
        "def Closure(term, I):\n",
        "\tif term in non_terms:\n",
        "\t\tfor i in gram[term]:\n",
        "\t\t\tI+=[(term,\".\"+i)]\n",
        "\tI = list(set(I))\n",
        "\tfor i in I:\n",
        "\t\t# print(\".\" != i[1][-1],i[1][i[1].index(\".\")+1])\n",
        "\t\tif \".\" != i[1][-1] and i[1][i[1].index(\".\")+1] in non_terms and i[1][i[1].index(\".\")+1] != term:\n",
        "\t\t\tI += Closure(i[1][i[1].index(\".\")+1], [])\n",
        "\treturn I\n",
        "\n",
        "Is = []\n",
        "Is+=set(Closure(\"S'\", []))\n",
        "\n",
        "\n",
        "countI = 0\n",
        "omegaList = [set(Is)]\n",
        "while countI<len(omegaList):\n",
        "\tnewrow = dict(new_row)\n",
        "\tvars_in_I = []\n",
        "\tIs = omegaList[countI]\n",
        "\tcountI+=1\n",
        "\tfor i in Is:\n",
        "\t\tif i[1][-1]!=\".\":\n",
        "\t\t\tindx = i[1].index(\".\")\n",
        "\t\t\tvars_in_I+=[i[1][indx+1]]\n",
        "\tvars_in_I = list(set(vars_in_I))\n",
        "\t# print(vars_in_I)\n",
        "\tfor i in vars_in_I:\n",
        "\t\tIn = []\n",
        "\t\tfor j in Is:\n",
        "\t\t\tif \".\"+i in j[1]:\n",
        "\t\t\t\trep = j[1].replace(\".\"+i,i+\".\")\n",
        "\t\t\t\tIn+=[(j[0],rep)]\n",
        "\t\tif (In[0][1][-1]!=\".\"):\n",
        "\t\t\ttemp = set(Closure(i,In))\n",
        "\t\t\tif temp not in omegaList:\n",
        "\t\t\t\tomegaList.append(temp)\n",
        "\t\t\tif i in non_terms:\n",
        "\t\t\t\tnewrow[i] = str(omegaList.index(temp))\n",
        "\t\t\telse:\n",
        "\t\t\t\tnewrow[i] = \"s\"+str(omegaList.index(temp))\n",
        "\t\t\tprint(f'Goto(I{countI-1},{i}):{temp} That is I{omegaList.index(temp)}')\n",
        "\t\telse:\n",
        "\t\t\ttemp = set(In)\n",
        "\t\t\tif temp not in omegaList:\n",
        "\t\t\t\tomegaList.append(temp)\n",
        "\t\t\tif i in non_terms:\n",
        "\t\t\t\tnewrow[i] = str(omegaList.index(temp))\n",
        "\t\t\telse:\n",
        "\t\t\t\tnewrow[i] = \"s\"+str(omegaList.index(temp))\n",
        "\t\t\tprint(f'Goto(I{countI-1},{i}):{temp} That is I{omegaList.index(temp)}')\n",
        "\n",
        "\tstateTable.append(newrow)\n",
        "print(\"\\n\\nList of I's\\n\")\n",
        "for i in omegaList:\n",
        "\tprint(f'I{omegaList.index(i)}: {i}')\n",
        "\n",
        "\n",
        "#populate replace elements in state Table\n",
        "I0 = []\n",
        "for i in list(omegaList[0]):\n",
        "\tI0 += [i[1].replace(\".\",\"\")]\n",
        "print(I0)\n",
        "\n",
        "for i in omegaList:\n",
        "\tfor j in i:\n",
        "\t\tif \".\" in j[1][-1]:\n",
        "\t\t\tif j[1][-2]==\"S\":\n",
        "\t\t\t\tstateTable[omegaList.index(i)][\"$\"] = \"Accept\"\n",
        "\t\t\t\tbreak\n",
        "\t\t\tfor k in terms:\n",
        "\t\t\t\tstateTable[omegaList.index(i)][k] = \"r\"+str(I0.index(j[1].replace(\".\",\"\")))\n",
        "print(\"\\nStateTable\")\n",
        "\n",
        "print(f'{\" \": <9}',end=\"\")\n",
        "for i in new_row:\n",
        "\tprint(f'|{i: <11}',end=\"\")\n",
        "\n",
        "print(f'\\n{\"-\":-<66}')\n",
        "for i in stateTable:\n",
        "\tprint(f'{\"I(\"+str(stateTable.index(i))+\")\": <9}',end=\"\")\n",
        "\tfor j in i:\n",
        "\t\tprint(f'|{i[j]: <10}',end=\" \")\n",
        "\tprint()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_0_qvblyvj-F",
        "outputId": "51798937-f2c7-4310-e9f7-eafc997122f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Goto(I0,a):{('C', 'a.C'), ('C', '.aC'), ('C', '.d')} That is I1\n",
            "Goto(I0,C):{('C', '.aC'), ('C', '.d'), ('S', 'C.C')} That is I2\n",
            "Goto(I0,d):{('C', 'd.')} That is I3\n",
            "Goto(I0,S):{(\"S'\", 'S.')} That is I4\n",
            "Goto(I1,a):{('C', 'a.C'), ('C', '.aC'), ('C', '.d')} That is I1\n",
            "Goto(I1,C):{('C', 'aC.')} That is I5\n",
            "Goto(I1,d):{('C', 'd.')} That is I3\n",
            "Goto(I2,a):{('C', 'a.C'), ('C', '.aC'), ('C', '.d')} That is I1\n",
            "Goto(I2,C):{('S', 'CC.')} That is I6\n",
            "Goto(I2,d):{('C', 'd.')} That is I3\n",
            "\n",
            "\n",
            "List of I's\n",
            "\n",
            "I0: {(\"S'\", '.S'), ('S', '.CC'), ('C', '.d'), ('C', '.aC')}\n",
            "I1: {('C', 'a.C'), ('C', '.aC'), ('C', '.d')}\n",
            "I2: {('C', '.aC'), ('C', '.d'), ('S', 'C.C')}\n",
            "I3: {('C', 'd.')}\n",
            "I4: {(\"S'\", 'S.')}\n",
            "I5: {('C', 'aC.')}\n",
            "I6: {('S', 'CC.')}\n",
            "['S', 'CC', 'd', 'aC']\n",
            "\n",
            "StateTable\n",
            "         |a          |d          |$          |S          |C          \n",
            "------------------------------------------------------------------\n",
            "I(0)     |s1         |s3         |           |4          |2          \n",
            "I(1)     |s1         |s3         |           |           |5          \n",
            "I(2)     |s1         |s3         |           |           |6          \n",
            "I(3)     |r2         |r2         |r2         |           |           \n",
            "I(4)     |           |           |Accept     |           |           \n",
            "I(5)     |r3         |r3         |r3         |           |           \n",
            "I(6)     |r1         |r1         |r1         |           |           \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "OPERATORS = set(['+', '-', '*', '/', '(', ')'])\n",
        "PRI = {'+':1, '-':1, '*':2, '/':2}\n",
        "\n",
        "### INFIX ===> POSTFIX ###\n",
        "def infix_to_postfix(formula):\n",
        "    stack = [] # only pop when the coming op has priority \n",
        "    output = ''\n",
        "    for ch in formula:\n",
        "        if ch not in OPERATORS:\n",
        "            output += ch\n",
        "        elif ch == '(':\n",
        "            stack.append('(')\n",
        "        elif ch == ')':\n",
        "            while stack and stack[-1] != '(':\n",
        "                output += stack.pop()\n",
        "            stack.pop() # pop '('\n",
        "        else:\n",
        "            while stack and stack[-1] != '(' and PRI[ch] <= PRI[stack[-1]]:\n",
        "                output += stack.pop()\n",
        "            stack.append(ch)\n",
        "    # leftover\n",
        "    while stack: \n",
        "    \toutput += stack.pop()\n",
        "    print(f'POSTFIX: {output}')\n",
        "    return output\n",
        "\n",
        "### INFIX ===> PREFIX ###\n",
        "def infix_to_prefix(formula):\n",
        "    op_stack = []\n",
        "    exp_stack = []\n",
        "    for ch in formula:\n",
        "        if not ch in OPERATORS:\n",
        "            exp_stack.append(ch)\n",
        "        elif ch == '(':\n",
        "            op_stack.append(ch)\n",
        "        elif ch == ')':\n",
        "            while op_stack[-1] != '(':\n",
        "                op = op_stack.pop()\n",
        "                a = exp_stack.pop()\n",
        "                b = exp_stack.pop()\n",
        "                exp_stack.append( op+b+a )\n",
        "            op_stack.pop() # pop '('\n",
        "        else:\n",
        "            while op_stack and op_stack[-1] != '(' and PRI[ch] <= PRI[op_stack[-1]]:\n",
        "                op = op_stack.pop()\n",
        "                a = exp_stack.pop()\n",
        "                b = exp_stack.pop()\n",
        "                exp_stack.append( op+b+a )\n",
        "            op_stack.append(ch)\n",
        "    \n",
        "    # leftover\n",
        "    while op_stack:\n",
        "        op = op_stack.pop()\n",
        "        a = exp_stack.pop()\n",
        "        b = exp_stack.pop()\n",
        "        exp_stack.append( op+b+a )\n",
        "    print(f'PREFIX: {exp_stack[-1]}')\n",
        "    return exp_stack[-1]\n",
        "\n",
        "### THREE ADDRESS CODE GENERATION ###\n",
        "def generate3AC(pos):\n",
        "\tprint(\"### THREE ADDRESS CODE GENERATION ###\")\n",
        "\texp_stack = []\n",
        "\tt = 1\n",
        "\t\n",
        "\tfor i in pos:\n",
        "\t\tif i not in OPERATORS:\n",
        "\t\t\texp_stack.append(i)\n",
        "\t\telse:\n",
        "\t\t\tprint(f't{t} := {exp_stack[-2]} {i} {exp_stack[-1]}')\n",
        "\t\t\texp_stack=exp_stack[:-2]\n",
        "\t\t\texp_stack.append(f't{t}')\n",
        "\t\t\tt+=1\n",
        "\n",
        "expres = input(\"INPUT THE EXPRESSION: \")\n",
        "pre = infix_to_prefix(expres)\n",
        "pos = infix_to_postfix(expres)\n",
        "generate3AC(pos)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S6XPmUgBvro-",
        "outputId": "c97ef40e-bc5e-478f-9cc5-cf724a707b51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INPUT THE EXPRESSION: A+B%c\n",
            "PREFIX: +%c\n",
            "POSTFIX: AB%c+\n",
            "### THREE ADDRESS CODE GENERATION ###\n",
            "t1 := % + c\n"
          ]
        }
      ]
    }
  ]
}